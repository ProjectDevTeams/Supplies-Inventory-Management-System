import React, { useState, useEffect } from "react";
import "./UserMoreTable.css";

function UserMoreTable({ searchTerm = "" }) {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;
  const [inputPage, setInputPage] = useState("");

  useEffect(() => {
    // ‚úÖ ‡πÉ‡∏ä‡πâ mock data ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    const mock = [
      {
        requester: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
        date: "2025-05-10",
        status: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      },
      {
        requester: "‡∏™‡∏∏‡∏†‡∏≤‡∏ß‡∏î‡∏µ ‡∏û‡∏π‡∏ô‡∏™‡∏∏‡∏Ç",
        date: "2025-05-12",
        status: "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      },
      {
        requester: "‡∏ó‡∏®‡∏û‡∏• ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡πÉ‡∏à‡∏î‡∏µ",
        date: "2025-05-13",
        status: "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      },
      {
        requester: "‡∏à‡∏¥‡∏£‡∏≤‡∏û‡∏£ ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡πÄ‡∏û‡πá‡∏ç",
        date: "2025-05-14",
        status: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      },
      {
        requester: "‡∏ö‡∏∏‡∏ç‡∏ä‡πà‡∏ß‡∏¢ ‡∏ä‡∏≤‡∏ç‡∏Å‡∏¥‡∏à",
        date: "2025-05-15",
        status: "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      },
      {
        requester: "‡∏î‡∏≤‡∏£‡∏≤‡∏ß‡∏£‡∏£‡∏ì ‡πÄ‡∏û‡πá‡∏ä‡∏£‡∏£‡∏∏‡πà‡∏á",
        date: "2025-05-16",
        status: "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      },
    ];

    const formatted = mock.map((item, index) => ({
      id: index + 1,
      requester: item.requester,
      date: formatDateThai(item.date),
      status: item.status,
    }));

    setData(formatted);
    setLoading(false);

    // üîÅ ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ API ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ uncomment ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
    /*
    const fetchData = async () => {
      try {
        const res = await axios.get("http://localhost/api/user_more_data.php");
        if (res.data.status === "success") {
          const mapped = res.data.data.map((item, index) => ({
            id: index + 1,
            requester: item.requester,
            date: formatDateThai(item.date),
            status: item.status,
          }));
          setData(mapped);
        }
      } catch (error) {
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
    */
  }, []);

  const formatDateThai = (dateStr) => {
    const date = new Date(dateStr);
    const monthNames = [
      "‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.",
      "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ.",
    ];
    return `${date.getDate()} ${monthNames[date.getMonth()]} ${date.getFullYear() + 543}`;
  };

  const filteredData = data.filter(
    (row) =>
      row.requester.toLowerCase().includes(searchTerm.toLowerCase()) ||
      row.status.toLowerCase().includes(searchTerm.toLowerCase()) ||
      row.date.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalPages = Math.ceil(filteredData.length / itemsPerPage);
  const indexOfLast = currentPage * itemsPerPage;
  const indexOfFirst = indexOfLast - itemsPerPage;
  const currentItems = filteredData.slice(indexOfFirst, indexOfLast);

  const handlePrev = () => {
    setCurrentPage((prev) => Math.max(prev - 1, 1));
  };

  const handleNext = () => {
    setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  };

  const handlePageChange = (e) => {
    setInputPage(e.target.value);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      const page = parseInt(inputPage);
      if (!isNaN(page) && page >= 1 && page <= totalPages) {
        setCurrentPage(page);
        setInputPage("");
      }
    }
  };

  if (loading) return <div className="user-more-loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;

  return (
    <div className="user-more-table-container">
      <table className="user-more-table">
        <thead>
          <tr>
            <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
            <th>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠</th>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
          </tr>
        </thead>
        <tbody>
          {currentItems.length === 0 ? (
            <tr>
              <td colSpan="4" className="user-more-no-data">
                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </td>
            </tr>
          ) : (
            currentItems.map((row, idx) => (
              <tr key={idx}>
                <td>{row.id}</td>
                <td>{row.requester}</td>
                <td>{row.date}</td>
                <td className={`status-${row.status.toLowerCase()}`}>{row.status}</td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      <div className="user-more-pagination">
        <div className="user-more-pagination-info">
          ‡πÅ‡∏™‡∏î‡∏á {indexOfFirst + 1} ‡∏ñ‡∏∂‡∏á {Math.min(indexOfLast, filteredData.length)} ‡∏à‡∏≤‡∏Å {filteredData.length} ‡πÅ‡∏ñ‡∏ß
        </div>
        <div className="user-more-pagination-buttons">
          <button className="btn" onClick={handlePrev} disabled={currentPage === 1}>‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤</button>
          <input
            type="number"
            min={1}
            max={totalPages}
            placeholder={`${currentPage} / ${totalPages}`}
            className="org-page-input"
            value={inputPage}
            onChange={handlePageChange}
            onKeyDown={handleKeyDown}
            onFocus={() => setInputPage("")}
          />
          <button className="btn" onClick={handleNext} disabled={currentPage === totalPages}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
        </div>
      </div>
    </div>
  );
}

export default UserMoreTable;
